using System;
using System.Collections.Generic;
using SixLabors.ImageSharp;
using SixLabors.ImageSharp.PixelFormats;

namespace RandomGenerator
{
    internal static class SaltExtractor
    {
        // ==========================================================
        //  SALT EXTRACTION
        //  Reads a monochrome PNG image (black/white) generated by
        //  RandomImageExporter and reconstructs 32-byte salt values
        //  from pixel bit patterns.
        //
        //  • Each pixel encodes one bit: black = 0, white = 1
        //  • 8 bits are grouped into a single byte
        //  • 32 bytes form one salt (256 bits)
        //
        //  The salts are returned as uppercase hexadecimal strings.
        // ==========================================================
        public static IEnumerable<string> ExtractAllSalts(string imagePath)
        {
            // ----------------------------------------------------------
            // STEP 1: Load the PNG image as an RGBA bitmap
            // ----------------------------------------------------------
            using var image = Image.Load<Rgba32>(imagePath);

            int bitBuffer = 0;
            int bitCount = 0;
            List<byte> saltBytes = new();

            // ----------------------------------------------------------
            // STEP 2: Read pixels sequentially and convert color → bit
            // ----------------------------------------------------------
            for (int y = 0; y < image.Height; y++)
            {
                for (int x = 0; x < image.Width; x++)
                {
                    var pixel = image[x, y];

                    // Black pixel = 0, White pixel = 1
                    int bit = (pixel.R == 0) ? 0 : 1;

                    // Shift bit into buffer
                    bitBuffer = (bitBuffer << 1) | bit;
                    bitCount++;

                    // Once 8 bits collected → convert to byte
                    if (bitCount == 8)
                    {
                        saltBytes.Add((byte)bitBuffer);
                        bitBuffer = 0;
                        bitCount = 0;
                    }

                    // Every 32 bytes → yield one full salt (256-bit)
                    if (saltBytes.Count == 32)
                    {
                        string hex = BitConverter.ToString(saltBytes.ToArray())
                            .Replace("-", "");
                        yield return hex;
                        saltBytes.Clear();
                    }
                }
            }
        }
    }
}
